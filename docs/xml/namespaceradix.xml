<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespaceradix" kind="namespace" language="C++">
    <compoundname>radix</compoundname>
    <innerclass refid="classradix_1_1Equation" prot="public">radix::Equation</innerclass>
    <innerclass refid="classradix_1_1EquationBase" prot="public">radix::EquationBase</innerclass>
    <innerclass refid="classradix_1_1Function" prot="public">radix::Function</innerclass>
    <innerclass refid="classradix_1_1Long" prot="public">radix::Long</innerclass>
    <innerclass refid="classradix_1_1Value" prot="public">radix::Value</innerclass>
    <innerclass refid="classradix_1_1Variable" prot="public">radix::Variable</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="equation__base_8hpp_1a424df68033ac24918b82aebdf0c747be" prot="public" static="no">
        <name>EquationType</name>
        <enumvalue id="equation__base_8hpp_1a424df68033ac24918b82aebdf0c747bea3c4ceb6b62de0857ad269186dddfed93" prot="public">
          <name>EQUATION</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="equation__base_8hpp_1a424df68033ac24918b82aebdf0c747beafa83defe3e26d24dae3a1b57f5df48ff" prot="public">
          <name>VALUE</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="equation__base_8hpp_1a424df68033ac24918b82aebdf0c747bead561b2a55073e7a0ea5e4acb2b9ba20c" prot="public">
          <name>FUNCTION</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/equation_base.hpp" line="7" column="1" bodyfile="include/equation_base.hpp" bodystart="7" bodyend="7"/>
      </memberdef>
      <memberdef kind="enum" id="long_8hpp_1a64b230690b49011d56ebddb28084705d" prot="public" static="no">
        <name>RoundingMode</name>
        <enumvalue id="long_8hpp_1a64b230690b49011d56ebddb28084705daf1315a74e75aff4f4dd2c761d5347f4b" prot="public">
          <name>NEAREST</name>
          <initializer>= MPFR_RNDN</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="long_8hpp_1a64b230690b49011d56ebddb28084705dac7cc770b034bf0fcfed720af99fbad56" prot="public">
          <name>RNDN</name>
          <initializer>= MPFR_RNDN</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="long_8hpp_1a64b230690b49011d56ebddb28084705daa58455d9489b35a4de3ed1d85b5b8a3a" prot="public">
          <name>TO_ZERO</name>
          <initializer>= MPFR_RNDZ</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="long_8hpp_1a64b230690b49011d56ebddb28084705da60025249a23dd4f02d07e17c2124c3fb" prot="public">
          <name>RNDZ</name>
          <initializer>= MPFR_RNDZ</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="long_8hpp_1a64b230690b49011d56ebddb28084705da7b74d07422924440177e8735e0270cc2" prot="public">
          <name>PLUS_INFINITY</name>
          <initializer>= MPFR_RNDU</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="long_8hpp_1a64b230690b49011d56ebddb28084705da396a1abc7681479181ed926be72c3721" prot="public">
          <name>RNDU</name>
          <initializer>= MPFR_RNDU</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="long_8hpp_1a64b230690b49011d56ebddb28084705da5f4daa4f54b902d1350e5c90a4be1b50" prot="public">
          <name>MINUS_INFINITY</name>
          <initializer>= MPFR_RNDD</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="long_8hpp_1a64b230690b49011d56ebddb28084705dae6d57904c413c37f70bdb63e48341678" prot="public">
          <name>RNDD</name>
          <initializer>= MPFR_RNDD</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="long_8hpp_1a64b230690b49011d56ebddb28084705dab06e21bb330dda958d723c301aaadfea" prot="public">
          <name>AWAY_ZERO</name>
          <initializer>= MPFR_RNDA</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="long_8hpp_1a64b230690b49011d56ebddb28084705dac11ea7acaab973370949a18d52c3b3c7" prot="public">
          <name>RNDA</name>
          <initializer>= MPFR_RNDA</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="long_8hpp_1a64b230690b49011d56ebddb28084705da6ed114ba2bf8a7740d87c31e80ba4ad8" prot="public">
          <name>FAITHFUL</name>
          <initializer>= MPFR_RNDF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="long_8hpp_1a64b230690b49011d56ebddb28084705da69b208fa24e2ad1b1d0695a2a031dc00" prot="public">
          <name>RNDF</name>
          <initializer>= MPFR_RNDF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="14" column="1" bodyfile="include/value/long.hpp" bodystart="14" bodyend="27"/>
      </memberdef>
      <memberdef kind="enum" id="value_8hpp_1af6e8f05e29e96c486c71799825503021" prot="public" static="no">
        <name>ValueType</name>
        <enumvalue id="value_8hpp_1af6e8f05e29e96c486c71799825503021aad4dc4fa241e3f9eb36f59b4b6599b92" prot="public">
          <name>VARIABLE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="value_8hpp_1af6e8f05e29e96c486c71799825503021ab09c6d7c799eb4ca8ed494cdb6d160d7" prot="public">
          <name>INT</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/value.hpp" line="10" column="1" bodyfile="include/value/value.hpp" bodystart="10" bodyend="10"/>
      </memberdef>
      <memberdef kind="enum" id="value_8hpp_1a356360a9202587f76163cc13f5a6df58" prot="public" static="no">
        <name>ValueOperator</name>
        <enumvalue id="value_8hpp_1a356360a9202587f76163cc13f5a6df58a775e308604ac513f21a49ee29988ce19" prot="public">
          <name>ADD</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="value_8hpp_1a356360a9202587f76163cc13f5a6df58a524cee1e81eeaa802866dade66f85f1f" prot="public">
          <name>SUB</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="value_8hpp_1a356360a9202587f76163cc13f5a6df58a320855aa70e65df7a14d3b1a7e1d16d0" prot="public">
          <name>MUL</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="value_8hpp_1a356360a9202587f76163cc13f5a6df58ab87fe3edcf2485ce6800df003136902b" prot="public">
          <name>DIV</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/value.hpp" line="11" column="1" bodyfile="include/value/value.hpp" bodystart="11" bodyend="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="long_8hpp_1ae64b4d3550099fdd66cbb2849b5a9689" prot="public" static="no">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>typedef Long radix::Int</definition>
        <argsstring></argsstring>
        <name>Int</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="197" column="1" bodyfile="include/value/long.hpp" bodystart="197" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="equation_8hpp_1a22c0deb20c89f0311160f8e8b8d0b0c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; radix::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Equation &amp;lhs)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classradix_1_1Equation" kindref="compound">Equation</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/equation/equation.hpp" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="equation_8hpp_1aa3c856b34fe18da76e61428c5470abbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool radix::operator==</definition>
        <argsstring>(const Equation &amp;lhs, const Equation &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classradix_1_1Equation" kindref="compound">Equation</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classradix_1_1Equation" kindref="compound">Equation</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/equation/equation.hpp" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="equation_8hpp_1acf4ccf40497b4dfac678246514aa7d05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool radix::operator!=</definition>
        <argsstring>(const Equation &amp;lhs, const Equation &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classradix_1_1Equation" kindref="compound">Equation</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classradix_1_1Equation" kindref="compound">Equation</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/equation/equation.hpp" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="equation_8hpp_1aeb437691b6b50781d713178260c332f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool radix::operator&lt;</definition>
        <argsstring>(const Equation &amp;lhs, const Equation &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classradix_1_1Equation" kindref="compound">Equation</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classradix_1_1Equation" kindref="compound">Equation</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/equation/equation.hpp" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="equation_8hpp_1a4988de5dcc7f4b12b77719b15e4ae210" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool radix::operator&gt;</definition>
        <argsstring>(const Equation &amp;lhs, const Equation &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classradix_1_1Equation" kindref="compound">Equation</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classradix_1_1Equation" kindref="compound">Equation</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/equation/equation.hpp" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="equation_8hpp_1ad694c31915baf05359ec6ebb9f7e415f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool radix::operator&lt;=</definition>
        <argsstring>(const Equation &amp;lhs, const Equation &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classradix_1_1Equation" kindref="compound">Equation</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classradix_1_1Equation" kindref="compound">Equation</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/equation/equation.hpp" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="equation_8hpp_1ae0e8f397c1d0cd0790a144e9048fe212" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool radix::operator&gt;=</definition>
        <argsstring>(const Equation &amp;lhs, const Equation &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classradix_1_1Equation" kindref="compound">Equation</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classradix_1_1Equation" kindref="compound">Equation</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/equation/equation.hpp" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="equation_8hpp_1a9acd381f2e6a4ec07ec538cacf4375c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Equation" kindref="compound">Equation</ref></type>
        <definition>Equation radix::operator+</definition>
        <argsstring>(const Equation &amp;lhs, const Equation &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classradix_1_1Equation" kindref="compound">Equation</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classradix_1_1Equation" kindref="compound">Equation</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/equation/equation.hpp" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="equation_8hpp_1afe0d5af1b5ee7632624312baa2ef9915" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Equation" kindref="compound">Equation</ref></type>
        <definition>Equation radix::operator-</definition>
        <argsstring>(const Equation &amp;lhs, const Equation &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classradix_1_1Equation" kindref="compound">Equation</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classradix_1_1Equation" kindref="compound">Equation</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/equation/equation.hpp" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="equation_8hpp_1a326215812419b17ca9fe9468a09bba7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Equation" kindref="compound">Equation</ref></type>
        <definition>Equation radix::operator*</definition>
        <argsstring>(const Equation &amp;lhs, const Equation &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classradix_1_1Equation" kindref="compound">Equation</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classradix_1_1Equation" kindref="compound">Equation</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/equation/equation.hpp" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="equation_8hpp_1a2fa04d4fcc89f993065d266b20e10ede" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Equation" kindref="compound">Equation</ref></type>
        <definition>Equation radix::operator/</definition>
        <argsstring>(const Equation &amp;lhs, const Equation &amp;rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classradix_1_1Equation" kindref="compound">Equation</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classradix_1_1Equation" kindref="compound">Equation</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/equation/equation.hpp" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a92a4c40dbca3d02f6a1bb297a60262af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; radix::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Long &amp;lhs)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="107" column="1" bodyfile="source/value/long.cpp" bodystart="242" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a41c2db2cf112093ed251aabc69a102fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool radix::operator==</definition>
        <argsstring>(const Long &amp;lhs, const Long &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="111" column="1" bodyfile="source/value/long.cpp" bodystart="247" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a11f259d1e30f7ea4aa77346410e41a0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool radix::operator!=</definition>
        <argsstring>(const Long &amp;lhs, const Long &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="112" column="1" bodyfile="source/value/long.cpp" bodystart="250" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1ac9888ac5207a16a41feac35a04f66123" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool radix::operator&lt;</definition>
        <argsstring>(const Long &amp;lhs, const Long &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="113" column="1" bodyfile="source/value/long.cpp" bodystart="253" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a6867621e2a51ad44bd72938532bfc33b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool radix::operator&gt;</definition>
        <argsstring>(const Long &amp;lhs, const Long &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="114" column="1" bodyfile="source/value/long.cpp" bodystart="256" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a8a2023481cc2f8f691c536dd43369a0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool radix::operator&lt;=</definition>
        <argsstring>(const Long &amp;lhs, const Long &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="115" column="1" bodyfile="source/value/long.cpp" bodystart="257" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a424681de8cca1a610a3f9c3205fefc2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool radix::operator&gt;=</definition>
        <argsstring>(const Long &amp;lhs, const Long &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="116" column="1" bodyfile="source/value/long.cpp" bodystart="260" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a181df96c1c90c3cc06afef38d8fc2883" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::operator+</definition>
        <argsstring>(const Long &amp;lhs, const Long &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="120" column="1" bodyfile="source/value/long.cpp" bodystart="264" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a05ecc022f1b8beff043382d53d15662a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::operator-</definition>
        <argsstring>(const Long &amp;lhs, const Long &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="121" column="1" bodyfile="source/value/long.cpp" bodystart="270" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a89e717c99076bf31c477e13c542b6dd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::operator*</definition>
        <argsstring>(const Long &amp;lhs, const Long &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="122" column="1" bodyfile="source/value/long.cpp" bodystart="276" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1afc157b40cd2bdfddbea74289b3ac1add" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::operator/</definition>
        <argsstring>(const Long &amp;lhs, const Long &amp;rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="123" column="1" bodyfile="source/value/long.cpp" bodystart="282" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a63e0d52ce7157ba8ae7feb1b3265887a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::abs</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>abs</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="127" column="1" bodyfile="source/value/long.cpp" bodystart="289" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1aa60ad0682fea9a04ff74f794c6693bb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::fabs</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>fabs</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="128" column="1" bodyfile="source/value/long.cpp" bodystart="295" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a8e20446776e4d1fcb565c1ae8a532444" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::max</definition>
        <argsstring>(const Long &amp;x, const Long &amp;y)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="129" column="1" bodyfile="source/value/long.cpp" bodystart="301" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1aa66ce83ace56f7ae56307e2d852a493c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::min</definition>
        <argsstring>(const Long &amp;x, const Long &amp;y)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="130" column="1" bodyfile="source/value/long.cpp" bodystart="307" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1ad4c1fa5fe5c5a1f1ec891dfe4e63a7de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::exp</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>exp</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="134" column="1" bodyfile="source/value/long.cpp" bodystart="314" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a88a836ba8e9918c71d5fb7904600b8b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::exp2</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>exp2</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="135" column="1" bodyfile="source/value/long.cpp" bodystart="320" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1aa412136cec7c6547393b47caa7c08e59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::exp10</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>exp10</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="136" column="1" bodyfile="source/value/long.cpp" bodystart="326" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a98a6a2c8b6fd529dc5e066d5cf87dde4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::expm1</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>expm1</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="137" column="1" bodyfile="source/value/long.cpp" bodystart="332" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a9abfd7bb979d9d9f651be9afb4b96df3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::log</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>log</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="139" column="1" bodyfile="source/value/long.cpp" bodystart="339" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a7ae44495f3907f08b988631e62c07bc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::log2</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>log2</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="140" column="1" bodyfile="source/value/long.cpp" bodystart="345" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1ab734474005775e809a789741c24165ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::log10</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>log10</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="141" column="1" bodyfile="source/value/long.cpp" bodystart="351" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1ae1a64a312231436121cc078d5b9e2d27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::log1p</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>log1p</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="142" column="1" bodyfile="source/value/long.cpp" bodystart="357" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a941e72e24d7c318f567b1503f2d4ba25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::pow</definition>
        <argsstring>(const Long &amp;base, const Long &amp;exp)</argsstring>
        <name>pow</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>exp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="146" column="1" bodyfile="source/value/long.cpp" bodystart="364" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a9527ef2fa8c928c57a7009a67191a62c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::sqrt</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>sqrt</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="147" column="1" bodyfile="source/value/long.cpp" bodystart="370" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1abc7080c94132ca3a8ce13f7ce0ebf9eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::cbrt</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>cbrt</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="148" column="1" bodyfile="source/value/long.cpp" bodystart="376" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a53b998b7830411cc5e66202d3fe2b864" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::rootn</definition>
        <argsstring>(const Long &amp;arg, const unsigned long int k)</argsstring>
        <name>rootn</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>const unsigned long int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="149" column="1" bodyfile="source/value/long.cpp" bodystart="382" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a42ee8016ad3743f17522b570d8d33cbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::hypot</definition>
        <argsstring>(const Long &amp;x, const Long &amp;y)</argsstring>
        <name>hypot</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="150" column="1" bodyfile="source/value/long.cpp" bodystart="388" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a03b1a34e9cc1cfa3561dbb6fbd590ba1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::sin</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>sin</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="154" column="1" bodyfile="source/value/long.cpp" bodystart="395" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a3be5cb5068305dbec6b8576f06c238c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::cos</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>cos</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="155" column="1" bodyfile="source/value/long.cpp" bodystart="401" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a163a3915199825b9b5b184aeeb475ae2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::tan</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>tan</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="156" column="1" bodyfile="source/value/long.cpp" bodystart="407" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1ac2c89c8f822c28d7f4d9ff827500ee2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::sec</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>sec</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="158" column="1" bodyfile="source/value/long.cpp" bodystart="414" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a564178df0f33ecfbee48f8981e2c0c41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::csc</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>csc</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="159" column="1" bodyfile="source/value/long.cpp" bodystart="420" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1aa4fd6976639c954b1ba621072963d1d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::cot</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>cot</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="160" column="1" bodyfile="source/value/long.cpp" bodystart="426" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a53b0470bc481ce47ef98676b8d8e89e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::acos</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>acos</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="162" column="1" bodyfile="source/value/long.cpp" bodystart="433" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a955c4b51d81df2a27a88f951ded89378" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::asin</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>asin</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="163" column="1" bodyfile="source/value/long.cpp" bodystart="439" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1ab48212a3bd9be1f9a5cc26d4aa4790f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::atan</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>atan</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="164" column="1" bodyfile="source/value/long.cpp" bodystart="445" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a6cf9d754e76f17863b3304c70be7d65e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::atan2</definition>
        <argsstring>(const Long &amp;y, const Long &amp;x)</argsstring>
        <name>atan2</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="166" column="1" bodyfile="source/value/long.cpp" bodystart="452" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a17ecceead8faf884b3789ca02ad0caf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::sinh</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>sinh</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="170" column="1" bodyfile="source/value/long.cpp" bodystart="459" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a18b9934a4eff4bce4381075cf1a50730" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::cosh</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>cosh</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="171" column="1" bodyfile="source/value/long.cpp" bodystart="465" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1aca0ca9d332d045c19409377f63169765" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::tanh</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>tanh</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="172" column="1" bodyfile="source/value/long.cpp" bodystart="471" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1add6d7d894a685c49656109b66c28bec2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::sech</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>sech</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="174" column="1" bodyfile="source/value/long.cpp" bodystart="478" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a18114088b8dcbb163f830aa98ccea552" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::csch</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>csch</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="175" column="1" bodyfile="source/value/long.cpp" bodystart="484" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a0e4602271c32dd9ff69c56e4a343cc8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::coth</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>coth</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="176" column="1" bodyfile="source/value/long.cpp" bodystart="490" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a106d353ba8c61f10057cf9f225f72a4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::acosh</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>acosh</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="178" column="1" bodyfile="source/value/long.cpp" bodystart="497" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a45c8b1902b2b27cb6fb1049d2b2b57a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::asinh</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>asinh</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="179" column="1" bodyfile="source/value/long.cpp" bodystart="503" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a0243d5981781f670681259a07bbbc9e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::atanh</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>atanh</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="180" column="1" bodyfile="source/value/long.cpp" bodystart="509" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1add84a7403a142a89f181f931a3f4a203" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::erf</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>erf</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="184" column="1" bodyfile="source/value/long.cpp" bodystart="516" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1ab82888863d6e2ed728c0a284b28391b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::erfc</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>erfc</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="185" column="1" bodyfile="source/value/long.cpp" bodystart="522" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a6c3b4c01a884b2bf9ec093a9cc5c2213" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::tgamma</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>tgamma</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="186" column="1" bodyfile="source/value/long.cpp" bodystart="528" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a5d917cb91e9668d2e8e91c375bf4429d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::lgamma</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>lgamma</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="187" column="1" bodyfile="source/value/long.cpp" bodystart="534" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1ad75812e7a80b46a91d89ff5eb93887c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::ceil</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>ceil</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="191" column="1" bodyfile="source/value/long.cpp" bodystart="541" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a8ce47542cd8fd1037ea5bca714f17bc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::floor</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>floor</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="192" column="1" bodyfile="source/value/long.cpp" bodystart="547" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a2e1bec6b49567119dc5086f36735c6ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::trunc</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>trunc</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="193" column="1" bodyfile="source/value/long.cpp" bodystart="553" bodyend="558"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a7ae2106760e094e64451a761a1c60082" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::round</definition>
        <argsstring>(const Long &amp;arg)</argsstring>
        <name>round</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="194" column="1" bodyfile="source/value/long.cpp" bodystart="559" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="long_8hpp_1a72a5591457fea0322183916e44980101" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classradix_1_1Long" kindref="compound">Long</ref></type>
        <definition>radix::Long radix::rint</definition>
        <argsstring>(const Long &amp;arg, const RoundingMode &amp;rnd)</argsstring>
        <name>rint</name>
        <param>
          <type>const <ref refid="classradix_1_1Long" kindref="compound">Long</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>const RoundingMode &amp;</type>
          <declname>rnd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/long.hpp" line="195" column="1" bodyfile="source/value/long.cpp" bodystart="565" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="value_8hpp_1af3fa11a40324401b7d3730c6f4b6e1fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; radix::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const std::shared_ptr&lt; Value &gt; &amp;lhs)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classradix_1_1Value" kindref="compound">Value</ref> &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/value.hpp" line="23" column="1" bodyfile="source/value/value.cpp" bodystart="22" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="value_8hpp_1a4f2281bb1f32bb532f86050dfd97293f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classradix_1_1Value" kindref="compound">Value</ref> &gt;</type>
        <definition>std::shared_ptr&lt; radix::Value &gt; radix::Operator</definition>
        <argsstring>(const std::shared_ptr&lt; Value &gt; &amp;lhs, const std::shared_ptr&lt; Value &gt; &amp;rhs, ValueOperator op)</argsstring>
        <name>Operator</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classradix_1_1Value" kindref="compound">Value</ref> &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classradix_1_1Value" kindref="compound">Value</ref> &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>ValueOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/value.hpp" line="25" column="1" bodyfile="source/value/value.cpp" bodystart="41" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="value_8hpp_1a97e13bab7de3d796115b33febb126c51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classradix_1_1Value" kindref="compound">Value</ref> &gt;</type>
        <definition>std::shared_ptr&lt; radix::Value &gt; radix::operator+</definition>
        <argsstring>(const std::shared_ptr&lt; Value &gt; &amp;lhs, const std::shared_ptr&lt; Value &gt; &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classradix_1_1Value" kindref="compound">Value</ref> &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classradix_1_1Value" kindref="compound">Value</ref> &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/value.hpp" line="27" column="1" bodyfile="source/value/value.cpp" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="value_8hpp_1af17cef0de3c2833043798ff19cd30f67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classradix_1_1Value" kindref="compound">Value</ref> &gt;</type>
        <definition>std::shared_ptr&lt; radix::Value &gt; radix::operator-</definition>
        <argsstring>(const std::shared_ptr&lt; Value &gt; &amp;lhs, const std::shared_ptr&lt; Value &gt; &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classradix_1_1Value" kindref="compound">Value</ref> &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classradix_1_1Value" kindref="compound">Value</ref> &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/value.hpp" line="29" column="1" bodyfile="source/value/value.cpp" bodystart="109" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="value_8hpp_1a8e94bebc2a0dafb7e6c341ce9bba8b06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classradix_1_1Value" kindref="compound">Value</ref> &gt;</type>
        <definition>std::shared_ptr&lt; radix::Value &gt; radix::operator*</definition>
        <argsstring>(const std::shared_ptr&lt; Value &gt; &amp;lhs, const std::shared_ptr&lt; Value &gt; &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classradix_1_1Value" kindref="compound">Value</ref> &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classradix_1_1Value" kindref="compound">Value</ref> &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/value.hpp" line="31" column="1" bodyfile="source/value/value.cpp" bodystart="113" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="value_8hpp_1aab586bcc2dc999c6b566010e660ee217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classradix_1_1Value" kindref="compound">Value</ref> &gt;</type>
        <definition>std::shared_ptr&lt; radix::Value &gt; radix::operator/</definition>
        <argsstring>(const std::shared_ptr&lt; Value &gt; &amp;lhs, const std::shared_ptr&lt; Value &gt; &amp;rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classradix_1_1Value" kindref="compound">Value</ref> &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classradix_1_1Value" kindref="compound">Value</ref> &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/value.hpp" line="33" column="1" bodyfile="source/value/value.cpp" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="variable_8hpp_1a4c330ebbe57c839da49dfc1ace699671" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; radix::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Variable &amp;lhs)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classradix_1_1Variable" kindref="compound">Variable</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/variable.hpp" line="37" column="1" bodyfile="source/value/variable.cpp" bodystart="47" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="variable_8hpp_1a172026881a6177e5aea956868bb69cae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classradix_1_1Value" kindref="compound">Value</ref> &gt;</type>
        <definition>std::shared_ptr&lt; radix::Value &gt; radix::operator+</definition>
        <argsstring>(const Variable &amp;lhs, const Variable &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classradix_1_1Variable" kindref="compound">Variable</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classradix_1_1Variable" kindref="compound">Variable</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/variable.hpp" line="39" column="1" bodyfile="source/value/variable.cpp" bodystart="56" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="variable_8hpp_1a62b0d7a837ab4ab4423bc876d7bc4b56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classradix_1_1Value" kindref="compound">Value</ref> &gt;</type>
        <definition>std::shared_ptr&lt; radix::Value &gt; radix::operator-</definition>
        <argsstring>(const Variable &amp;lhs, const Variable &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classradix_1_1Variable" kindref="compound">Variable</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classradix_1_1Variable" kindref="compound">Variable</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/variable.hpp" line="40" column="1" bodyfile="source/value/variable.cpp" bodystart="63" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="variable_8hpp_1a5e5f581e96e68655380e8b3000dc1131" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classradix_1_1Value" kindref="compound">Value</ref> &gt;</type>
        <definition>std::shared_ptr&lt; radix::Value &gt; radix::operator*</definition>
        <argsstring>(const Variable &amp;lhs, const Variable &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classradix_1_1Variable" kindref="compound">Variable</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classradix_1_1Variable" kindref="compound">Variable</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/variable.hpp" line="41" column="1" bodyfile="source/value/variable.cpp" bodystart="70" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="variable_8hpp_1a45a2523bf900f70103efa630ce8fc096" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classradix_1_1Value" kindref="compound">Value</ref> &gt;</type>
        <definition>std::shared_ptr&lt; radix::Value &gt; radix::operator/</definition>
        <argsstring>(const Variable &amp;lhs, const Variable &amp;rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classradix_1_1Variable" kindref="compound">Variable</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classradix_1_1Variable" kindref="compound">Variable</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/value/variable.hpp" line="42" column="1" bodyfile="source/value/variable.cpp" bodystart="77" bodyend="83"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/equation/equation.hpp" line="9" column="1"/>
  </compounddef>
</doxygen>
