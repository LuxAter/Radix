<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="value_8hpp" kind="file" language="C++">
    <compoundname>value.hpp</compoundname>
    <includes refid="equation__base_8hpp" local="yes">../equation_base.hpp</includes>
    <includes local="no">memory</includes>
    <includes local="no">ostream</includes>
    <includedby refid="radix_8hpp" local="yes">include/radix.hpp</includedby>
    <includedby refid="variable_8hpp" local="yes">include/value/variable.hpp</includedby>
    <includedby refid="long_8hpp" local="yes">include/value/long.hpp</includedby>
    <includedby refid="long_8cpp" local="yes">source/value/long.cpp</includedby>
    <includedby refid="value_8cpp" local="yes">source/value/value.cpp</includedby>
    <includedby refid="variable_8cpp" local="yes">source/value/variable.cpp</includedby>
    <incdepgraph>
      <node id="53">
        <label>include/value/value.hpp</label>
        <link refid="value_8hpp"/>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>string</label>
      </node>
      <node id="57">
        <label>ostream</label>
      </node>
      <node id="54">
        <label>../equation_base.hpp</label>
        <link refid="equation__base_8hpp_source"/>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="58">
        <label>include/value/value.hpp</label>
        <link refid="value_8hpp"/>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>include/value/long.hpp</label>
        <link refid="long_8hpp_source"/>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>include/radix.hpp</label>
        <link refid="radix_8hpp_source"/>
      </node>
      <node id="60">
        <label>include/value/variable.hpp</label>
        <link refid="variable_8hpp_source"/>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classradix_1_1Value" prot="public">radix::Value</innerclass>
    <innernamespace refid="namespaceradix">radix</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>RADIX_VALUE_VALUE_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RADIX_VALUE_VALUE_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../equation_base.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceradix" kindref="compound">radix</ref><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>ValueType<sp/>{<sp/>VARIABLE<sp/>=<sp/>0,<sp/>INT<sp/>=<sp/>1<sp/>};</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>ValueOperator<sp/>{ADD<sp/>=<sp/>0,<sp/>SUB<sp/>=<sp/>1,<sp/>MUL<sp/>=<sp/>2,<sp/>DIV<sp/>=<sp/>3};</highlight></codeline>
<codeline lineno="12" refid="classradix_1_1Value" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classradix_1_1Value" kindref="compound">Value</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classradix_1_1EquationBase" kindref="compound">EquationBase</ref><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><ref refid="classradix_1_1Value" kindref="compound">Value</ref>();</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><ref refid="classradix_1_1Value" kindref="compound">Value</ref>(ValueType<sp/>type);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classradix_1_1Value" kindref="compound">Value</ref>();</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/>Latex()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>ValueType<sp/>type_;</highlight></codeline>
<codeline lineno="21"><highlight class="normal">};</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal">std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;<sp/>out,<sp/>const<sp/>std::shared_ptr&lt;Value&gt;&amp;<sp/>lhs);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">std::shared_ptr&lt;Value&gt;<sp/>Operator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Value&gt;&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Value&gt;&amp;<sp/>rhs,<sp/>ValueOperator<sp/>op);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal">std::shared_ptr&lt;Value&gt;<sp/>operator+(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Value&gt;&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Value&gt;&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="29"><highlight class="normal">std::shared_ptr&lt;Value&gt;<sp/>operator-(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Value&gt;&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Value&gt;&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="31"><highlight class="normal">std::shared_ptr&lt;Value&gt;<sp/>operator*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Value&gt;&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Value&gt;&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="33"><highlight class="normal">std::shared_ptr&lt;Value&gt;<sp/>operator/(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Value&gt;&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Value&gt;&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>radix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>RADIX_VALUE_VALUE_HPP_</highlight></codeline>
    </programlisting>
    <location file="include/value/value.hpp"/>
  </compounddef>
</doxygen>
